<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <Nullable>enable</Nullable>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <LangVersion>latest</LangVersion>
    <Optimize>true</Optimize>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <TargetFramework>net481</TargetFramework>
    <AssemblyTitle>DiscordConnectorPlugin.ModName</AssemblyTitle>
    <Company>DiscordConnectorPlugin.Author</Company>
    <Product>DiscordConnectorPlugin.ModName</Product>
    <Description>Enhances Valheim by sending messages to a Discord Webhook</Description>
    <Copyright>Copyright ©  2025</Copyright>
    <AssemblyVersion>DiscordConnectorPlugin.ModVersion</AssemblyVersion>
    <FileVersion>DiscordConnectorPlugin.ModVersion</FileVersion>
    <OutputPath>bin\$(Configuration)\</OutputPath>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
  </PropertyGroup>
  <PropertyGroup>
    <BepInExPath Condition="!Exists('$(BepInExPath)')AND Exists('$(GamePath)')">$(GamePath)\BepInEx</BepInExPath>
    <CorlibPath Condition="!Exists('$(CorlibPath)')  AND Exists('$(GamePath)')">$(GamePath)\valheim_Data\Managed</CorlibPath>
    <CorlibPath Condition="!Exists('$(CorlibPath)')  AND Exists('$(GamePath)')">$(GamePath)\unstripped_corlib</CorlibPath>
    <PublicizedAssembliesPath Condition="!Exists('$(PublicizedAssembliesPath)') AND Exists('$(GamePath)')">$(GamePath)\valheim_Data\Managed\publicized_assemblies</PublicizedAssembliesPath>
    <VALHEIM_INSTALL Condition="Exists('$(GamePath)')">$(GamePath)</VALHEIM_INSTALL>
  </PropertyGroup>
  <PropertyGroup>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
  </PropertyGroup>
  <Import Project="Environment.props" Condition="Exists('Environment.props')" />
  <Import Project="DoPrebuild.props" Condition="Exists('DoPrebuild.props')" />
  <Target Name="GetAssemblyVersion" AfterTargets="$(AfterTargets)">
    <GetAssemblyIdentity AssemblyFiles="$(TargetPath)">
      <Output TaskParameter="Assemblies" ItemName="Targets" />
    </GetAssemblyIdentity>
    <ItemGroup>
      <AssemblyVersions Include="@(Targets-&gt;'%(Version)')" />
    </ItemGroup>
    <Error Text="Failed to get Assembly Version." Condition="'%(AssemblyVersions.Identity)' == ''" />
    <PropertyGroup>
      <AssemblyVersion>%(AssemblyVersions.Identity)</AssemblyVersion>
      <Major>$(AssemblyVersion.Split('.')[0])</Major>
      <Minor>$(AssemblyVersion.Split('.')[1])</Minor>
      <Patch>$(AssemblyVersion.Split('.')[2])</Patch>
      <PackageName>$(AssemblyName)_v$(Major).$(Minor).$(Patch)</PackageName>
      <PackageVersion>$(Major).$(Minor).$(Patch)</PackageVersion>
      <VersionString>$(Major).$(Minor).$(Patch)</VersionString>
      <PackageDir>$(ProjectDir)\Metadata\$(PackageName)</PackageDir>
    </PropertyGroup>
  </Target>
  <Target Name="CopyOutputDLL" AfterTargets="GetAssemblyVersion">
    <Error Text="DLL not found in target directory." Condition="!Exists('$(TargetDir)$(AssemblyName).dll')" />
    <Copy SourceFiles="$(TargetDir)$(AssemblyName).dll" DestinationFolder="$(CopyOutputDLLPath)" OverwriteReadOnlyFiles="true" Condition="Exists('$(CopyOutputDLLPath)')" />
    <Copy SourceFiles="$(TargetDir)$(AssemblyName).dll" DestinationFolder="$(CopyOutputDLLPath2)" OverwriteReadOnlyFiles="true" Condition="Exists('$(CopyOutputDLLPath2)')" />
    <Copy SourceFiles="$(TargetDir)$(AssemblyName).dll" DestinationFolder="$(CopyOutputDLLPath3)" OverwriteReadOnlyFiles="true" Condition="Exists('$(CopyOutputDLLPath3)')" />
  </Target>
  <Target Name="CopyReadMeToTSFolder" AfterTargets="CopyOutputDLL" Condition=" ('$(Configuration)|$(Platform)' == 'Release|AnyCPU') And ('$(OS)' == 'Windows_NT') ">
    <Copy SourceFiles="$(ProjectDir)\Metadata\README.md" DestinationFolder="$(PackageDir)" OverwriteReadOnlyFiles="true" />
  </Target>
  <Target Name="UpdateManifestVersion" AfterTargets="CopyReadmeToTSFolder" Condition=" ('$(Configuration)|$(Platform)' == 'Release|AnyCPU') And ('$(OS)' == 'Windows_NT') ">
    <ItemGroup>
      <ManifestFile Include="$(ProjectDir)Metadata\manifest.json" />
    </ItemGroup>
    <Message Text="ManifestFile is @(ManifestFile)" />
    <Message Text="Updating version number in Metadata\manifest.json" Condition="Exists(@(ManifestFile))" />
    <Exec Command="powershell.exe -ExecutionPolicy Bypass -Command &quot;&amp; { &amp; '$(ProjectDir)UpdateManifest.ps1' -manifestFile '@(ManifestFile)' -versionString '$(PackageVersion)' }&quot;" />
  </Target>
  <Target Name="MakeThunderstorePackage" AfterTargets="UpdateManifestVersion" Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <Error Text="manifest.json not found in Thunderstore directory." Condition="!Exists('$(ProjectDir)\Metadata\manifest.json')" />
    <Error Text="icon.png not found in Thunderstore directory. Please note that Thunderstore requires this image to be 256x256 in dimension" Condition="!Exists('$(ProjectDir)\Metadata\icon.png')" />
    <ItemGroup>
      <PackageFiles Include="$(TargetDir)$(AssemblyName).dll" Condition="Exists('$(TargetDir)$(AssemblyName).dll')" />
      <PackageFiles Include="$(ProjectDir)\Metadata\manifest.json" Condition="Exists('$(ProjectDir)\Metadata\manifest.json')" />
      <PackageFiles Include="$(ProjectDir)\Metadata\icon.png" Condition="Exists('$(ProjectDir)\Metadata\icon.png')" />
      <PackageFiles Include="$(ProjectDir)\Metadata\README.md" Condition="Exists('$(ProjectDir)\Metadata\README.md')" />
    </ItemGroup>
    <MakeDir Directories="$(PackageDir)" />
    <Copy SourceFiles="@(PackageFiles)" DestinationFolder="$(PackageDir)" />
    <Copy SourceFiles="$(ProjectDir)..\docs\changelog.md" DestinationFiles="$(PackageDir)\CHANGELOG.md" />
    <ZipDirectory SourceDirectory="$(PackageDir)" DestinationFile="Packages\Thunderstore\$(PackageName).zip" Overwrite="true" />
    <RemoveDir Directories="$(PackageDir)" />
  </Target>
  <Target Name="MakeNexusPackage" AfterTargets="MakeThunderstorePackage" Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <MakeDir Directories="$(ProjectDir)\Nexus" />
    <ItemGroup>
      <NexusPackageFiles Include="$(TargetDir)$(AssemblyName).dll;" />
    </ItemGroup>
    <MakeDir Directories="$(PackageDir)" />
    <Copy SourceFiles="@(NexusPackageFiles)" DestinationFolder="$(PackageDir)" />
    <ZipDirectory SourceDirectory="$(PackageDir)" DestinationFile="Packages\Nexus\$(PackageName).zip" Overwrite="true" />
    <RemoveDir Directories="$(PackageDir)" />
  </Target>
  <ItemGroup Condition="'$(TargetFramework.TrimEnd(`0123456789`))' == 'net'">
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.3" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="0Harmony">
      <HintPath>$(BepInExPath)\core\0Harmony.dll</HintPath>
    </Reference>
    <Reference Include="assembly_guiutils">
      <HintPath>$(PublicizedAssembliesPath)\assembly_guiutils_publicized.dll</HintPath>
    </Reference>
    <Reference Include="assembly_utils">
      <HintPath>$(PublicizedAssembliesPath)\assembly_utils_publicized.dll</HintPath>
    </Reference>
    <Reference Include="assembly_valheim">
      <HintPath>$(PublicizedAssembliesPath)\assembly_valheim_publicized.dll</HintPath>
    </Reference>
    <Reference Include="BepInEx">
      <HintPath>$(BepInExPath)\core\BepInEx.dll</HintPath>
    </Reference>
    <Reference Include="mscorlib" />
    <Reference Include="ServerSync">
      <HintPath>Libs\ServerSync.dll</HintPath>
    </Reference>
    <Reference Include="SoftReferenceableAssets">
      <HintPath>$(PublicizedAssembliesPath)\SoftReferenceableAssets_publicized.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine">
      <HintPath>$(CorlibPath)\UnityEngine.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.AssetBundleModule">
      <HintPath>$(CorlibPath)\UnityEngine.AssetBundleModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.CoreModule">
      <HintPath>$(CorlibPath)\UnityEngine.CoreModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.ImageConversionModule">
      <HintPath>$(CorlibPath)\UnityEngine.ImageConversionModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.IMGUIModule">
      <HintPath>$(CorlibPath)\UnityEngine.IMGUIModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.InputLegacyModule">
      <HintPath>$(CorlibPath)\UnityEngine.InputLegacyModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.ParticleSystemModule">
      <HintPath>$(CorlibPath)\UnityEngine.ParticleSystemModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.PhysicsModule">
      <HintPath>$(CorlibPath)\UnityEngine.PhysicsModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.TextRenderingModule">
      <HintPath>$(CorlibPath)\UnityEngine.TextRenderingModule.dll</HintPath>
    </Reference>
    <Reference Include="UnityEngine.UI">
      <HintPath>$(CorlibPath)\UnityEngine.UI.dll</HintPath>
    </Reference>
    <Reference Include="Unity.TextMeshPro">
      <HintPath>$(GamePath)\valheim_Data\Managed\Unity.TextMeshPro.dll</HintPath>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Content Include="DoPrebuild.props" />
    <Content Include="Environment.props">
      <DependentUpon>.editorconfig</DependentUpon>
    </Content>
    <Content Include="ILRepack.targets" />
    <Content Include="Libs\ServerSync.dll" />
    <Content Include="Metadata\DiscordConnector-Nexus.readme" />
    <Content Include="Metadata\icon.png" />
    <Content Include="Metadata\icon.svg" />
    <Content Include="Metadata\icon2.svg" />
    <Content Include="Metadata\icon3.svg" />
    <Content Include="Metadata\icon4.svg" />
    <Content Include="Metadata\manifest.json" />
    <Content Include="Metadata\README.md" />
    <Content Include="Metadata\thunderstore.toml" />
    <Content Include="Packages\.gitkeep" />
    <Content Include="Packages\Nexus\.gitkeep" />
    <Content Include="Packages\Thunderstore\.gitkeep" />
    <Content Include="UpdateManifest.ps1" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="ILRepack.Lib.MSBuild.Task" Version="2.0.37">
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="JotunnLib" Version="2.23.2" />
    <PackageReference Include="LiteDB" Version="5.0.21" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="System.Buffers" Version="4.6.0" />
  </ItemGroup>
</Project>